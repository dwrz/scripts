If P=NP, then the world would be a profoundly different place than we usually
assume it to be. There would be no special value in “creative leaps,” no
fundamental gap between solving a problem and recognizing the solution once it’s
found. Everyone who could appreciate a symphony would be Mozart; everyone who
could follow a step-by-step argument would be Gauss; everyone who could
recognize a good investment strategy would be Warren Buffett. It’s possible to
put the point in Darwinian terms: if this is the sort of universe we inhabited,
why wouldn’t we already have evolved to take advantage of it?

Scott Aaronson, Reasons to Believe
%
In a business like this, the people with the power are the ones that have the
understanding of what's going on, not necessarily the one's on top. It's very
important that those people who have the knowledge are the ones that make the
decisions. So we set up something where everyone who had the knowledge had an
equal say in what was going on.

Gordon Moore
%
At the time, we lacked the benefits of age and experience. We didn't know we
couldn't do it.

Ed Roberts
%
The spark was that you see something beyond what you see every day. It's the
same sort of thing that causes people to want to be poets instead of
bankers. That same spirit can be put into products, those products can be given
to people and they can sense that spirit.

Steve Jobs
%
There was total intellectual freedom. There was no conventional wisdom. Almost
every idea was up for challenge, and got challenged regularly.

John Warnock
%
I don't care about being right, I care about success.

Steven Jobs
%
It comes down to trying to expose yourself to the best things humans have done,
and then trying to bring those things in to what you are doing.

Steve Jobs
%
The problem was, the industry was not measured by who has the best selling
personal computer, or who has the most innovative technology. The industry was
measured by who had the most open system that was adopted by the most other
companies.

John Scully
%
The only problem with Microsoft is just they have no taste.

They don't think of original ideas, and they don't bring much culture into their product.

Why is that important?

Profortianlly spaced fonts come from typesetting and beautiful books; if it
weren't for the Mac they would never have that in their products.

I have no problem with Microsoft success, they have earned their success, for
the most part. I have a problem with the fact that they really just make third
rate products.

Steve Jobs
%
I will admit, quite frantly, that I think Windows today is probably four years
behind, three years behind, where it would have been had we not danced with IBM
for so long.Because the amount of slit energy, split work, split IQ in the
company really cost our end customer real innovaction in our product line.

Steve Ballmer
%
A change in perspective is worth 80 IQ points.

Alan Kay, Rethinking CS Education
%
"We're in business to make money."

Well, not really. You're only interested in making millions and billions.

Science has created trillions of dollars off of almost no investment.

Get your head on straight, invest the right way.

Alan Kay, Rethinking CS Education
%
Humans are incapable of securely storing high-quality cryptographic keys, and
they have unacceptable speed and accuracy when performing cryptographic
operations. They are also large, expensive to maintain, difficult to manage, and
they pollute the environment. It is astonishing that these devices continue to
be manufactured and deployed, but they are sufficiently pervasive that we must
design our protocols around their limitations.

Mike Speciner and Radia Perlman, Network Security: Private Communication in a
Public World
%
The architect’s two most important tools are: the eraser in the drafting room
and the wrecking bar on the site.

Frank Lloyd Wright
%
The Joys of the Craft

Why is programming fun? What delights may its practitioner expect as his reward?

First is the sheer joy of making things. As the child delights in his mud pie,
so the adult enjoys building things, especially things of his own design. I
think this delight must be an image of God's delight in making things, a delight
shown in the distinctness and newness of each leaf and each snowflake.

Second is the pleasure of making things that are useful to other people. Deep
within, we want others to use our work and to find it helpful. In this respect
the programming system is not essentially different from the child's first clay
pencil holder "for Daddy's office."

Third is the fascination of fashioning complex puzzle-like objects of
interlocking moving parts and watching them work in subtle cycles, playing out
the consequences of principles built in from the beginning. The programmed
computer has all the fascination of the pinball machine or the jukebox
mechanism, carried to the ultimate.

Fourth is the joy of always learning, which springs from the nonrepearing nature
of the task. In one way or another the problem is ever new, and its solver
learns something: sometimes practical, sometimes theoretical, and sometimes
both.

Finally, there is the delight of working in such a tractable medium. The
programmer, like the poet, works only slightly removed from pure
thought-stuff. He builds his castles in the air, from air, creating by exertion
of the imagination. Few media of creation are so flexible, so easy to polish and
rework, so readily capable of realizing grand conceptual structures. (As we
shall see later, this very tractability has its own problems.)

Yet the program construct, unlike the poet's words, is real in the sense that it
moves and works, producing visible outputs separate from the construct
itself. It prints results, draws pictures, produces sounds, moves arms. The
magic of myth and legend has come true in our time. One types the correct
incantation on a keyboard, and a display screen comes to life, showing things
that never were nor could be.

Programming then is fun because it gratifies creative longings built deep within
us and delights sensibilities we have in common with all men.

Frederick P. Brooks Jrs, The Mythical Man Month
%
The Woes of the Craft

Not all is delight, however, and knowing the inherent woes makes it easier to
bear them when they appear.

First, one must perform perfectly. The computer resembles the magic of legend in
this respect, too. If one character, one pause, of the incantation is not
strictly in proper form, the magic doesn't work. Human beings are not accustomed
to being perfect, and few areas of human activity demand it. Adjusting to the
requirement for perfection is, I think, the most difficult part of learning to
program.

Next, other people set one's objectives, provide one's resources, and furnish
one's information. One rarely controls the circumstances of his work, or even
its goal. In management terms, one's authority is not sufficient for his
responsability. In practice, actual (as opposed to formal) authority is acquired
from the very momentum of accomplishment.

The dependence upon others has a particular case that is especially painful for
the system programmer. He depends upon other people's programs. These are often
maldesigned, poorly implemented, incompletely delivered (no source code or test
case), and poorly documented. So he must spend hours studying and fixing things
that in an ideal world would be complete, available, and usable.

The next woe is that designing grand concepts is fun; finding nitty little bugs
is just work. With any creative activity come dreary hours of tedious,
painstaking labor, and programming is no exception.

Next, one finds that debugging has a linear convergence, or worse, where one
somehow expects a quadratic sort of approach to the end. So testing drags on and
on, the last difficult bugs taking more time to find than the first.

The last woe, and sometimes the last straw, is that the product over which one
has labored so long appears to be obsolete upon (or before) completion. Already
colleagues and competitors are in hot pursuit of new and better ideas. Already
the displacement of one's thought-child is not only conceived, but scheduled.

This always seems worse than is really is. The new and better product is
generally not available when one completes his own; it is only talked about. It,
too, will require months of development. The real tiger is never a match for the
paper one, unless actual use is wanted. Then the virtues of reality have a
satisfaction all their own.

Of course the technological base on which one builds is always advancing. As
soon as one freezes a design, it becomes obsolete in terms of its concepts. But
implementation of real products demands phasing and quantizing. The obsolescence
of an implementation must be measured against other existing implementations,
not against unrealized concepts. The challenge and the mission are to find real
solutions to real problems on actual schedules with available resources.

This then is programming, both a tar pit in which many efforts have floundered
and a creative activity with joys and woes all its own. For many, the joys far
outweigh the woes, and for them the remainder of this book will attempt to lay
some boardwalks across the tar.

Frederick P. Brooks Jrs, The Mythical Man Month
%
Our techniques for estimating are poorly developed . . . they reflect an
unvoiced assumption which is quite untrue, i.e., that all will go well.

Our estimating techniques fallaciously confuse effort with progress, hiding the
assumption that men and months are interchangeable.

Frederick P. Brooks Jrs, The Mythical Man Month
%
The bearing of a child takes nine months, no matter how many women are assigned.

Frederick P. Brooks Jrs, The Mythical Man Month
%
Since software construction is inherently a systems effort -- an exercise in
complex interrelationships -- communication effort is great, and it quickly
dominates the decrease in idividual task time brought about by
partitioning. Adding more men then lengthens, not shortens, the schedule.

Frederick P. Brooks Jrs, The Mythical Man Month
%
Observe that for the programmer, as for the chef, the urgency of the patron may
govern the scheduled completion of the task, but it cannot govern the actual
completion. An omelette, promised in two minutes, may appear to be progressing
nicely. But when it has not set in two minutes, the customer has two choices -
wait or eat it raw. Software customers have had the same choices.

Frederick P. Brooks Jrs, The Mythical Man Month
%
Adding manpower to a late software project makes it later.

Frederick P. Brooks Jrs, The Mythical Man Month
%
“This great church is an incomparable work of art. There is neither aridity nor
confusion in the tenets it sets forth.

It is the zenith of a style, the work of artists who had understood and
assimilated all their predecessors' successes, in complete possession of the
techniques of their times, but using them without indiscreet display nor
gratuitous feats of skill.

It was Jean d'Orbais who undoubtedly conceived the general plan of the building,
a plan which was respected, at least in its essential elements, by his
successors. This is one of the reasons for the extreme coherence and unity of
the edifice.

—REIMS CATHEDRAL GUIDEBOOK

Frederick P. Brooks Jrs, The Mythical Man Month
%
Against these, the architectural unity of Rheims stands in glorious
contrast. The joy that stirs the beholder comes as much from the integrity of
the design as from any particular excellences. As the guidebook tells, this
integrity was achieved by the self-abnegation of eight generations of builders,
each of whom sacrificed some of his ideas so that the whole might be of pure
design. The result proclaims not only the glory of God, but also His power to
salvage fallen men from their pride.

Frederick P. Brooks Jrs, The Mythical Man Month
%
Ease of use is enhanced only if the time gained in functional specification
exceeds the time lost in learning, remembering, and searching manuals. With
modern programming systems this gain does exceed the cost, but in recent years
the ratio of gain to cost seems to have fallen as more and more complex
functions have been added. I am haunted by the memory of the ease of use of the
IBM 650, even without an assembler or any other software at all.

Frederick P. Brooks Jrs, The Mythical Man Month
%
The architect of a system, like the architect of a building, is the user's
agent. It is his job to bring professional and technical knowledge to bear in
the unalloyed interest of the user, as opposed to the interests of the salesman,
the fabricator, etc.

Frederick P. Brooks Jrs, The Mythical Man Month
%
Architecture must be carefully distinguished from implementation. As Blaauw has
said, "Where architecture tells what happens, implementation tells how it is
made to happen." He gives as a simple example a clock, whose architecture
consists of the face, the hands, and the winding knob. When a child has learned
this architecture, he can tell time as easily from a wristwatch as from a church
tower. The implementation, however, and its realization, describe what goes on
inside the case -- powering by any of many mechanisms and accuracy control by any
of many.

Frederick P. Brooks Jrs, The Mythical Man Month
%
If a system is to have conceptual integrity, someone must control the
concepts. That is an aristocracy that needs no apology.

Frederick P. Brooks Jrs, The Mythical Man Month
%
There are many examples from other arts and crafts that lead one to believe that
discipline is good for art. Indeed, an artist's aphorism asserts, "Form is
liberating." The worst buildings are those whose budget was too great for the
purposes to be served.

Frederick P. Brooks Jrs, The Mythical Man Month
%
This effect, which I have seen many times, is confirmed by R. W. Conway, whose
group at Cornell built the PLIC compiler for the PLII language. He says, "We
finally decided to implement the language unchanged and unimproved, for the
debates about language would have taken all our effort."

Frederick P. Brooks Jrs, The Mythical Man Month
%
It is a very humbling experience to make a multimillion-dollar mistake, but it
is also very memorable.

Frederick P. Brooks Jrs, The Mythical Man Month
%
An architect's first work is apt to be spare and clean. He knows he doesn't know
what he's doing, so he does it carefully and with great restraint.

As he designs the first work, frill after frill and embellishment after
embellishment occur to him. These get stored away to be used "next time". Sooner
or later the first system is finished, and the architect, with firm confidence
and a demonstrated mastery of that class of systems, is ready to build a second
system.

This second is the most dangerous system a man ever designs.  When he does his
third and later ones, his prior experiences will confirm each other as to the
general characteristics of such systems, and their differences will identify
those parts of his experience that are particular and not generalizable.

The general tendency is to over-design the second system, using all the ideas
and frills that were cautiously sidetracked on the first one. The result, as
Ovid says, is a "big pile".

Frederick P. Brooks Jrs, The Mythical Man Month
%
The manual must not only describe everything the user does see, including all
interfaces; it must also refrain from describing what the user does not
see. That is the implementer's business, and there his design freedom must be
unconstrained.

Frederick P. Brooks Jrs, The Mythical Man Month
%
"Never go to sea with two chronometers; take one or three."

Frederick P. Brooks Jrs, The Mythical Man Month
%
In most computer projects there comes a day when it is discovered that the
machine and the manual don't agree. When the confrontation follows, the manual
usually loses, for it can be changed far more quickly and cheaply than the
machine.

Frederick P. Brooks Jrs, The Mythical Man Month
%
First, the man with strong management talent and strong technical talent is
rarely found. Thinkers are rare; doers are rarer; and thinker-doers are rarest.

Frederick P. Brooks Jrs, The Mythical Man Month
%
The job done least well by project managers is to utilize the technical genius
who is not strong on management talent.

Frederick P. Brooks Jrs, The Mythical Man Month
%
Practice is the best of all instructors.

Publius
%
Experience is a dear teacher, but fools will learn at no other.

Poor Richard's Almanac
%
The author should gaze at Noah, and . . . learn, as they did in the Ark, to
crowd a great deal of matter into a very small compass.

Sydney Smith, Edinburgh Review
%
Sometimes strategic breakthrough will be a new algorithm, such as the
Cooley-Tukey Fast Fourier Transform or the substitution of n log n sort for an
n^2 set of comparisons.  Much more often, strategic breakthrough will come from
redoing the representation of the data or tables. This is where the heart of the
program lies. Show me your flowcharts and conceal your tables, and I shall
continue to be mystified. Show me your tables, and I won't usually need your
flowcharts; they'll obvious.

Frederick P. Brooks Jrs, The Mythical Man Month
%
The programmer at wit's end for lack of space can often do best by disentengling
himself from his code, rearing back, and contemplating his data. Representation
is the essence of programming.

Frederick P. Brooks Jrs, The Mythical Man Month
%
Chemical engineers learned long ago that a process that works in the laboratory
cannot be implemented in a factory in only one step. An intermediate step called
the PILOT PLANT is necessary to give experience in scaling quantities up and in
operating in nonprotective environments. For example, a laboratory process for
desalting water will be tested in a pilot plant of 10,000 gallon/day capacity
before being used for a 2,000,000 gallon/day community water system.

Programming system builders have also been exposed to this lesson, but it seems
to have not yet been learned. Project after project designs a set of algorithems
and then plunges into construction of customer-deliverable software on a
schedule that demands delivery of the first thing built.

In most projects, the first system built is barely usable. It may be too slow,
too big, awkward to use, or all three. There is no alternative but to start
again, smarting but smarter, and build a redesigned version in which these
problems are solved. The discard and redesign may be done in one lump, or it may
be done piece-by-piece. But all large-system experience shows that it will be
done. Where a new system concept or new technology is used, one has to build
a system to throw away, for even the best planning is not so omniscient as to
get it right the first time.

The management question here, therefore, is not whether to build a pilot system
and throw it away. You will do that. The only question is whether to plan in
advance to build and throw away, or to promise to deliver the throwaway to
customers. Seen this way, the answer is much clearer. Delivering that throwaway
to customers buys time, but it does so only at the cost of agony for the user,
distraction for the builders while they do the redesign and a bad reputation for
the product that the best redesign will find hard to live down.

Hence plan to throw one away; you will, anyhow.

Frederick P. Brooks Jrs, The Mythical Man Month
%
Lehman and Belady have studied the history of successive releases in a large
operating system. They find that the total number of modules increases linearly
with release number, but that the num- ber of modules affected increases
exponentially with release num- ber. All repairs tend to destroy the structure,
to increase the entropy and disorder of the system. Less and less effort is
spent on fixing original design flaws; more and more is spent on fixing flaws
introduced by earlier fixes. As time passes, the system becomes less and less
well-ordered. Sooner or later the fixing ceases to gain any ground. Each forward
step is matched by a backward one. Although in principle usable forever, the
system has worn out as a base for progress. Furthermore, machines change,
configurations change, and user requirements change, so the system is not in
fact usable forever. A brand-new, from-the- ground-up redesign is necessary.

And so from a statistical mechanical model, Belady and Leh- man arrive for
programming-systems at a more general conclusion supported by the experience of
all the earth. "Things are always at their best in the beginning," said
Pascal. C. S. Lewis has stated it more perceptively:

That is the key to history. Terrific energy is expended—civilizations are built
up—excellent institutions devised; but each time something goes wrong. Some
fatal flaw always brings the selfish and cruel people to the top, and then it
all slides back into misery and ruin. In fact, the machine conks. It seems to
start up all right and runs a few yards, and then it breaks down.

Systems program building is an entropy-decreasing process, hence inherently
metastable. Program maintenance is an entropy- increasing process, and even its
most skillful execution only delays the subsidence of the system into unfixable
obsolescence.

Frederick P. Brooks Jrs, The Mythical Man Month
%
